 
worker_processes  auto;

events {
    worker_connections  1024;
    # worker_processes and worker_connections allows you to calculate maxclients value: 
    # max_clients = worker_processes * worker_connections
}


http {
    include       mime.types;
    # anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block

    default_type  application/octet-stream;
    #

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    access_log  /logs/access.log  ;
    error_log  /logs/error.log  ;

    sendfile        on;
    # If serving locally stored static files, sendfile is essential to speed up the server,
    # But if using as reverse proxy one can deactivate it
    
    #tcp_nopush     on;
    # works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at once.

    #keepalive_timeout  0;
    keepalive_timeout  65;
    # timeout during which a keep-alive client connection will stay open.

    #gzip  on;
    # tells the server to use on-the-fly gzip compression.

 


    server {
        listen 80;
        #listen 443 ssl;
        server_name www.startup-autobahn.cn;
        root html;
        index index.html index.htm;
        #ssl_certificate   /etc/nginx/cert/214501351810380.pem;
        #ssl_certificate_key  /etc/nginx/cert/214501351810380.key;
        #ssl_session_timeout 5m;
        #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    }


    server {
        listen 80;
        server_name admin.startup-autobahn.cn;
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
        location / {
            proxy_pass http://api:8080;
       }
    }

    server {
        listen 80;
        server_name api.startup-autobahn.cn;
        location / {
            proxy_pass http://api:8080;
       }
    }

}
